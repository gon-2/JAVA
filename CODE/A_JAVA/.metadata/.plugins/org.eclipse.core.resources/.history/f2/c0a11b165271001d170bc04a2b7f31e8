package com.mc.f_array;

import java.util.Arrays;

public class C_ArrayUtil {

	public static void main(String[] args) {

		// iArr에 담겨있는 값들을 오름차순으로 정렬해주세요.
		// 오름차순은 작은 수가 앞에, 큰 수가 뒤에 오도록 정렬
//		int[] iArr = { 1, 20, 4, 2, 7, 9 };
//		int[] data = { 1,2,3,4,5 };
//		int[] data2 = {6,7,8,9,0};
//		
//		int[] res = merge(data, data2);
//		System.out.println(Arrays.toString(res));

//		int[] radomArr = new int[10];
//		int random = (int) (Math.random() * 100) + 1;
		
		q2();

	}//MAIN
	
	public static void q3() {
		// 크기가 10인 int[]를 3개 생성하세요.
		// 각 int[]을 1~95 사이의 임의의 수로 초기화 하세요.
		// 3개 int[]에 들어있는 숫자들 중에서 7,8,9번째로 작은 수를 구하세요
		// ex) [1,2,3,3] [4,5,5,6] [6,6,8,9]
		// [출력양식] 7번째 : 5
		// 8번째 : 6
		// 9번째 : 6

		int[] iArr = new int[10];
		int[] iArr2 = new int[10];
		int[] iArr3 = new int[10];

		for (int i = 0; i < iArr3.length; i++) {
			iArr[i] = (int) (Math.random() * 95) + 1;
			iArr2[i] = (int) (Math.random() * 95) + 1;
			iArr3[i] = (int) (Math.random() * 95) + 1;
		}

		// 2줄의 코드로 문제 해결

		System.out.println();

	}
	
	

	public static void q2() {
		// [문제]
		// 크기가 10인 int[]을 선언하고
		// 1~100 사이의 임의의 정수를 발생시켜, 배열 공간에 기록하시오
		// 기록된 10개의 값 중 가장 큰 값과 가장 작은 값을 알아내어
		// [출력양식] min : 1, max : 100 과 같은 형식으로 출력하시오.
		// 메서드명 : q2
		// hint : Math클래스의 random 메서드를 활용하면 임의의 정수를 발생시킬 수 있다.
		
		int[] randomArr = new int[10];

		// 0 ~ 0.9999999999999999
		// 0*100 ~ 0.999999999999 * 100
		// 0 ~ 99 + 1
		// 1 ~ 100
		for (int i = 0; i < randomArr.length; i++) {
			int random = (int) (Math.random() * 100) + 1;
			randomArr[i] = random;
			
		}

		System.out.println();
	}
	
	
	private static int[] merge(int[] arr1, int[] arr2) {
		// 기능 : 매개변수로 넘어온 두 int배열을 하나의 배열로 합쳐주는 메서드
		// 메서드 이름 : merge
		// 메서드를 작성하고 테스트까지 완료 해주세요.
		// ex) int[] data = {1,2,3,4,5}
		// int[] data2 = {6,7,8,9,0}
		// merge(data,data2) -> [1,2,3,4,5,6,7,8,9,0]

		// 배열은 크기변경이 불가능 하므로 매개변수로 전달받으 ㄴ두 배열의 크기를 합친 크기의 새로운 배열을 생성
		int[] bigArr = new int[arr1.length + arr2.length];

		// 두 배열에 있는 값들을 새로운 배열에 밀어 넣는다
		for (int i = 0; i < arr1.length; i++) {
			bigArr[i] = arr1[i];
		}

		for (int i = 0; i < arr2.length; i++) {
			bigArr[arr1.length + i] = arr2[i];

		}

		// 새로운 배열을 반환한다.
		return bigArr;
	}

	
	
	private static int[] add(int[] iArr, int num) {

//		iArr = add(iArr, 10000);
//		System.out.println(Arrays.toString(iArr));

		int[] bigArr = new int[iArr.length + 1];

		for (int i = 0; i < iArr.length; i++) {
			bigArr[i] = iArr[i];
		}

		bigArr[bigArr.length - 1] = num;
		return bigArr;

	}

	
	
	private static void desc(int[] iArr) {// 내림차순
		for (int i = 0; i < iArr.length; i++) {
			boolean flg = true;

			for (int j = 0; j < iArr.length - 1 - i; j++) {
				if (iArr[j] < iArr[j + 1]) {
					int tmp = iArr[j];
					iArr[j] = iArr[j + 1];
					iArr[j + 1] = tmp;
					flg = false;
				}
			}

			if (flg)
				break;
			System.out.println("변경 후 : " + Arrays.toString(iArr));
		}
	}
	
	

	private static void asc(int[] iArr) {// 오름차순

		for (int i = 0; i < iArr.length; i++) {
			boolean flg = true;

			for (int j = 0; j < iArr.length - 1 - i; j++) {
				if (iArr[j] > iArr[j + 1]) {
					int tmp = iArr[j];
					iArr[j] = iArr[j + 1];
					iArr[j + 1] = tmp;
					flg = false;
				}
			}

			if (flg)
				break;
		}
	}

	
	
	private static void q1() {
		// 아래 배열의 0번 인덱스와 1번 인덱스의 자리를 바꿔주세요.
		int[] iArr = { 1, 3, 5, 7, 9 };

		System.out.println("변경 전 : " + Arrays.toString(iArr));

		int tmp = iArr[0];
		iArr[0] = iArr[1];
		iArr[1] = tmp;

		System.out.println("변경 후 : " + Arrays.toString(iArr));
	}
}
